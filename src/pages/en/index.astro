---
import GameLayout from "../../layouts/GameLayout.astro";
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/Navbar.astro";
import GameFeatures from "../../components/GameFeatures.astro";
import FAQ from "../../components/FAQ.astro";
import Footer from "../../components/Footer.astro";
import config from "../../config/config.json";
import i18next from "../../i18n/i18n";

const { game } = config;
await i18next.changeLanguage("en");
const t = i18next.t.bind(i18next);
---

<GameLayout lang="en" />

<Layout>
  <Navbar />
  <main class="min-h-screen bg-gradient-to-b from-purple-50 to-white">
    <!-- Hero Section with Game -->
    <section class="pt-24">
      <!-- Hero Content -->
      <div class="text-center mb-16">
        <div class="mb-8 px-4">
          <h1
            class="text-4xl sm:text-5xl lg:text-6xl font-bold text-transparent tracking-tight gradient-title"
          >
            {t("hero.title")}
          </h1>
        </div>
        <p class="text-lg sm:text-xl text-purple-600 max-w-2xl mx-auto px-4 leading-relaxed">
          {t("hero.description")}
        </p>
      </div>

      <!-- Game Container -->
      <div class="flex justify-center px-4">
        <div class="w-full max-w-[1200px]">
          <div
            class="game-container relative aspect-[16/9] bg-white rounded-t-xl shadow-[0_8px_30px_rgb(0,0,0,0.08)] overflow-hidden"
            data-game-src={game.iframeSrc}
          >
            <div
              id="start-container"
              class="absolute inset-0 flex items-center justify-center z-20"
            >
              <!-- Background Image Container -->
              <div class="absolute inset-0">
                <img src="/FiddleBops.webp" alt={t("title")} class="w-full h-full object-cover" />
                <!-- Blur and Dark Overlay -->
                <div
                  class="absolute inset-0 backdrop-blur-sm bg-gradient-to-b from-purple-900/20 to-violet-900/20"
                >
                </div>
              </div>
              <!-- Start Button -->
              <div class="relative z-10 text-center">
                <button
                  id="start-button"
                  class="relative px-8 py-4 bg-gradient-to-r from-purple-500 to-violet-500 text-white text-xl rounded-xl hover:from-purple-600 hover:to-violet-600 transform hover:scale-105 transition-all duration-300 focus:ring-4 focus:ring-purple-200 focus:ring-offset-2 shadow-lg"
                  aria-label={t("startButton")}
                >
                  {t("startButton")}
                </button>
              </div>
            </div>

            <div class="absolute inset-0">
              <iframe
                id="game-frame"
                class="w-full h-full"
                title={t("title")}
                sandbox={game.sandboxAttributes}
                referrerpolicy="origin"
                loading="lazy"
                aria-label={`${t("title")} ${t("gameInterface")}`}></iframe>
            </div>

            <div id="error-container" class="hidden absolute inset-0 bg-white z-10">
              <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-center">
                <p class="text-red-500 mb-4" role="alert">{t("loadingError")}</p>
                <button
                  id="retry-button"
                  class="px-6 py-3 bg-gradient-to-r from-purple-500 to-violet-500 text-white rounded-xl hover:from-purple-600 hover:to-violet-600 transition-all focus:ring-2 focus:ring-purple-200 focus:ring-offset-2"
                  aria-label={t("retryButton")}
                >
                  {t("retryButton")}
                </button>
              </div>
            </div>
          </div>

          <!-- How to Play -->
          <div class="bg-white rounded-b-xl shadow-[0_8px_30px_rgb(0,0,0,0.08)] p-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-8 text-center">
              {t("howToPlay.title")}
            </h2>
            <div class="grid md:grid-cols-3 gap-8">
              <!-- Basic Controls -->
              <div class="bg-gradient-to-br from-purple-50 to-violet-50 rounded-xl p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                  <span
                    class="w-7 h-7 bg-purple-100 rounded-full flex items-center justify-center mr-2"
                  >
                    <span class="text-purple-600">1</span>
                  </span>
                  {t("howToPlay.controls.basic.title")}
                </h3>
                <ul class="space-y-3">
                  {
                    ["point1", "point2", "point3"].map((point) => (
                      <li class="flex items-start text-gray-600">
                        <span class="w-4 h-4 bg-purple-100 rounded-full flex-shrink-0 flex items-center justify-center mt-1 mr-2">
                          <span class="text-purple-600 text-xs">•</span>
                        </span>
                        <span class="text-sm">{t(`howToPlay.controls.basic.${point}`)}</span>
                      </li>
                    ))
                  }
                </ul>
              </div>

              <!-- Advanced Controls -->
              <div class="bg-gradient-to-br from-purple-50 to-violet-50 rounded-xl p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                  <span
                    class="w-7 h-7 bg-purple-100 rounded-full flex items-center justify-center mr-2"
                  >
                    <span class="text-purple-600">2</span>
                  </span>
                  {t("howToPlay.controls.advanced.title")}
                </h3>
                <ul class="space-y-3">
                  {
                    ["point1", "point2", "point3"].map((point) => (
                      <li class="flex items-start text-gray-600">
                        <span class="w-4 h-4 bg-purple-100 rounded-full flex-shrink-0 flex items-center justify-center mt-1 mr-2">
                          <span class="text-purple-600 text-xs">•</span>
                        </span>
                        <span class="text-sm">{t(`howToPlay.controls.advanced.${point}`)}</span>
                      </li>
                    ))
                  }
                </ul>
              </div>

              <!-- Scoring Rules -->
              <div class="bg-gradient-to-br from-purple-50 to-violet-50 rounded-xl p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                  <span
                    class="w-7 h-7 bg-purple-100 rounded-full flex items-center justify-center mr-2"
                  >
                    <span class="text-purple-600">3</span>
                  </span>
                  {t("howToPlay.scoring.title")}
                </h3>
                <ul class="space-y-3">
                  {
                    ["rule1", "rule2", "rule3"].map((rule) => (
                      <li class="flex items-start text-gray-600">
                        <span class="w-4 h-4 bg-purple-100 rounded-full flex-shrink-0 flex items-center justify-center mt-1 mr-2">
                          <span class="text-purple-600 text-xs">•</span>
                        </span>
                        <span class="text-sm">{t(`howToPlay.scoring.${rule}`)}</span>
                      </li>
                    ))
                  }
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Game Features -->
      <section class="mt-24">
        <div class="w-full max-w-[1200px] mx-auto px-4">
          <div class="bg-white rounded-xl shadow-[0_8px_30px_rgb(0,0,0,0.08)] p-8">
            <GameFeatures />
          </div>
        </div>
      </section>

      <!-- FAQ Section -->
      <section class="mt-24 mb-24">
        <div class="w-full max-w-[1200px] mx-auto px-4">
          <div class="bg-white rounded-xl shadow-[0_8px_30px_rgb(0,0,0,0.08)] p-8">
            <FAQ />
          </div>
        </div>
      </section>
    </section>

    <!-- Share Button -->
    <div class="fixed bottom-4 right-4 z-50">
      <button
        class="share-toggle bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-full p-3 shadow-lg hover:scale-105 transition-transform"
        aria-label={t("shareButton")}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6 text-purple-600"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
          ></path>
        </svg>
      </button>
      <div
        class="share-menu hidden absolute bottom-full right-0 mb-2 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-3 shadow-lg"
      >
        <div class="a2a_kit a2a_kit_size_32 a2a_default_style flex flex-col gap-2">
          <a
            class="a2a_dd hover:scale-110 transition-transform"
            href="https://www.addtoany.com/share"></a>
          <a class="a2a_button_facebook hover:scale-110 transition-transform"></a>
          <a class="a2a_button_twitter hover:scale-110 transition-transform"></a>
          <a class="a2a_button_whatsapp hover:scale-110 transition-transform"></a>
          <a class="a2a_button_reddit hover:scale-110 transition-transform"></a>
          <a class="a2a_button_linkedin hover:scale-110 transition-transform"></a>
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<script>
  const gameFrame = document.getElementById("game-frame") as HTMLIFrameElement | null;
  const startContainer = document.getElementById("start-container");
  const startButton = document.getElementById("start-button");
  const errorContainer = document.getElementById("error-container");
  const retryButton = document.getElementById("retry-button");
  const gameContainer = document.querySelector(".game-container");
  const gameSrc = gameContainer?.getAttribute("data-game-src") || "";

  startButton?.addEventListener("click", startGame, { passive: true });

  function startGame() {
    startContainer?.classList.add("opacity-0");
    if (gameFrame) {
      gameFrame.src = gameSrc;
    }
    setTimeout(() => {
      startContainer?.classList.add("hidden");
    }, 300);
  }

  if (gameFrame) {
    gameFrame.addEventListener("error", showError, { passive: true });
  }

  retryButton?.addEventListener("click", retryLoading, { passive: true });

  document.addEventListener("touchstart", () => {}, { passive: true });
  document.addEventListener("wheel", () => {}, { passive: true });

  let audioContext: AudioContext | null = null;
  document.addEventListener(
    "click",
    () => {
      if (!audioContext) {
        audioContext = new AudioContext();
      }
    },
    { passive: true }
  );

  function showError() {
    errorContainer?.classList.remove("hidden");
  }

  function retryLoading() {
    errorContainer?.classList.add("hidden");
    if (gameFrame?.src) {
      const currentSrc = gameFrame.src;
      gameFrame.src = "";
      gameFrame.src = currentSrc;
    }
  }

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !errorContainer?.classList.contains("hidden")) {
      retryLoading();
    }
  });

  // Share button logic
  const shareToggle = document.querySelector(".share-toggle");
  const shareMenu = document.querySelector(".share-menu");

  // Mobile share menu toggle
  shareToggle?.addEventListener("click", () => {
    shareMenu?.classList.toggle("hidden");
  });

  // Close share menu when clicking outside
  document.addEventListener("click", (e) => {
    const target = e.target as Element;
    if (shareMenu && shareToggle && !shareMenu.contains(target) && !shareToggle.contains(target)) {
      shareMenu.classList.add("hidden");
    }
  });
</script>

<style>
  .gradient-title {
    background: linear-gradient(90deg, rgb(126, 34, 206) 0%, rgb(139, 92, 246) 100%);
    -webkit-background-clip: text;
    background-clip: text;
    padding-bottom: 0.2em;
    display: inline-block;
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.2;
  }

  #start-container {
    transition: opacity 0.3s ease-in-out;
  }

  #start-container img {
    transition: transform 0.3s ease-in-out;
  }

  #start-container:hover img {
    transform: scale(1.05);
  }

  .share-menu {
    transform-origin: bottom right;
    transition:
      transform 0.2s ease-out,
      opacity 0.2s ease-out;
  }

  .share-menu:not(.hidden) {
    animation: slideIn 0.2s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>
